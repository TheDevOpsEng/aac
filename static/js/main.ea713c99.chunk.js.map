{"version":3,"sources":["CategoryView.js","ImagePicker.js","CategoriesView.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["CategoryView","_ref","category","onEdit","onSpeak","_jsxs","className","onClick","onDoubleClick","children","imageURL","_jsx","src","alt","name","ImagePicker","onImageSelected","onCancel","type","accept","onChange","e","file","target","files","predefinedCategories","id","subcategories","CategoriesView","categories","setCategories","useState","loadCategories","savedCategories","localStorage","getItem","JSON","parse","showingImagePicker","setShowingImagePicker","selectedCategory","setSelectedCategory","saveCategories","setItem","stringify","handleSpeech","text","speech","SpeechSynthesisUtterance","window","speechSynthesis","speak","map","subcategory","handleSubcategoryEdit","image","newCategories","cat","sub","URL","createObjectURL","handleImageUpload","App","Boolean","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","React","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ea713c99.chunk.js","sourcesContent":["import React from 'react';\nimport './CategoryView.css';\n\nconst CategoryView = ({ category, onEdit, onSpeak }) => {\n  return (\n    <div className=\"category-view\" onClick={onSpeak} onDoubleClick={onEdit}>\n      {category.imageURL && <img src={category.imageURL} alt={category.name} className=\"category-image\" />}\n      <p>{category.name}</p>\n    </div>\n  );\n};\n\nexport default CategoryView;\n","import React from 'react';\n\nconst ImagePicker = ({ onImageSelected, onCancel }) => {\n  const handleImageChange = (e) => {\n    const file = e.target.files[0];\n    if (file) {\n      onImageSelected(file);\n    }\n  };\n\n  return (\n    <div className=\"image-picker\">\n      <input type=\"file\" accept=\"image/*\" onChange={handleImageChange} />\n      <button onClick={onCancel}>Cancel</button>\n    </div>\n  );\n};\n\nexport default ImagePicker;\n","import React, { useState } from 'react';\nimport CategoryView from './CategoryView';\nimport ImagePicker from './ImagePicker';\nimport './CategoriesView.css';\n\nconst predefinedCategories = [\n  {\n    id: 1,\n    name: 'Greetings',\n    imageURL: null,\n    subcategories: [\n      { id: 1, name: 'Hello', imageURL: null },\n      { id: 2, name: 'Goodbye', imageURL: null }\n    ]\n  },\n  {\n    id: 2,\n    name: 'Emotions',\n    imageURL: null,\n    subcategories: [\n      { id: 1, name: 'Happy', imageURL: null },\n      { id: 2, name: 'Sad', imageURL: null }\n    ]\n  },\n  {\n    id: 3,\n    name: 'Colors',\n    imageURL: null,\n    subcategories: [\n      { id: 1, name: 'Red', imageURL: null },\n      { id: 2, name: 'Blue', imageURL: null }\n    ]\n  }\n];\n\nconst loadCategories = () => {\n  const savedCategories = localStorage.getItem('categories');\n  return savedCategories ? JSON.parse(savedCategories) : predefinedCategories;\n};\n\nconst CategoriesView = () => {\n  const [categories, setCategories] = useState(loadCategories());\n  const [showingImagePicker, setShowingImagePicker] = useState(false);\n  const [selectedCategory, setSelectedCategory] = useState(null);\n\n  const handleImageUpload = (image) => {\n    if (selectedCategory) {\n      const newCategories = categories.map((cat) => {\n        if (cat.id === selectedCategory.id) {\n          if (selectedCategory.subcategory) {\n            return {\n              ...cat,\n              subcategories: cat.subcategories.map((sub) =>\n                sub.id === selectedCategory.subcategory.id\n                  ? { ...sub, imageURL: URL.createObjectURL(image) }\n                  : sub\n              )\n            };\n          } else {\n            return { ...cat, imageURL: URL.createObjectURL(image) };\n          }\n        }\n        return cat;\n      });\n      setCategories(newCategories);\n      saveCategories(newCategories);\n    }\n  };\n\n  const saveCategories = (categories) => {\n    localStorage.setItem('categories', JSON.stringify(categories));\n  };\n\n  const handleSubcategoryEdit = (category, subcategory) => {\n    setSelectedCategory({ ...category, subcategory });\n    setShowingImagePicker(true);\n  };\n\n  const handleSpeech = (text) => {\n    const speech = new SpeechSynthesisUtterance(text);\n    window.speechSynthesis.speak(speech);\n  };\n\n  return (\n    <div>\n      <div className=\"categories-grid\">\n        {categories.map((category) => (\n          <div key={category.id}>\n            <CategoryView\n              category={category}\n              onEdit={() => {\n                setSelectedCategory(category);\n                setShowingImagePicker(true);\n              }}\n              onSpeak={() => handleSpeech(category.name)}\n            />\n            <div className=\"subcategories-grid\">\n              {category.subcategories.map((subcategory) => (\n                <CategoryView\n                  key={subcategory.id}\n                  category={subcategory}\n                  onEdit={() => handleSubcategoryEdit(category, subcategory)}\n                  onSpeak={() => handleSpeech(subcategory.name)}\n                />\n              ))}\n            </div>\n          </div>\n        ))}\n      </div>\n      {showingImagePicker && (\n        <ImagePicker\n          onImageSelected={(image) => {\n            handleImageUpload(image);\n            setShowingImagePicker(false);\n          }}\n          onCancel={() => setShowingImagePicker(false)}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default CategoriesView;\n","import React from 'react';\nimport CategoriesView from './CategoriesView';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>AAC Communication App for Qasim</h1>\n      </header>\n      <CategoriesView />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.0/8 are considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Let's check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl, config);\n  \n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit https://cra.link/PWA'\n            );\n          });\n        } else {\n          // Is not localhost. Just register service worker\n          registerValidSW(swUrl, config);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then((registration) => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                  'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See https://cra.link/PWA.'\n                );\n  \n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n  \n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch((error) => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n      headers: { 'Service-Worker': 'script' }\n    })\n      .then((response) => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n          (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then((registration) => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready\n        .then((registration) => {\n          registration.unregister();\n        })\n        .catch((error) => {\n          console.error(error.message);\n        });\n    }\n  }\n  \n  export { register, unregister };\n  ","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\nreportWebVitals();\n"],"sourceRoot":""}